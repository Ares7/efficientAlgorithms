1
6
2 3 4 5 8 9


5-32: 
3 4 6 5 7
8 10 6 8 9 
11 10 12 13
15 9 11 12 14
13 15 16 18 14
16 17 19 18 20
21 23




6-63:
3 4 6 5 7 8 10 6 8 9
11 10 12 13 15 9 11 12 14 13
15 16 18 14 16 17 19 18 20 21
23 10 12 13 15 14 16 17 19 15 
17 18 20 19 21 22 24 18 20 21 
23 22 24 25 27 23 25 26 28 27 
29 30 32 
Case #1: 840





***************
3465

1
3
4 2 4

1
6
4 2 4 5 7 11

1
10
4 2 4 5 3 5 7 9 11 7

13860/4

worked:
1
7
5 3 5 7 9 11 7
3465

***************


________
1
2
3 5

worked:
1
3
4 6 9 
________


$$$$$$$$$$
1
3
2 1 4

worked:
1
7
3 2 5 4 7 8 6

840


$$$$$$$$$$




2
2
3 5

3
1 1 1

Case #1: 36
Case #2: 12




12
1
4

3
4 2 4

2
3 2

3
3 1 4

3
2 1 4

2
3 3

2
3 2

3
1 2 1

3
2 2 3

3
1 2 2

8
8 9 4 5 6 2 3 7

6
8 7 9 5 4 3

Case #1: 5
Case #2: 3465
Case #3: 12
Case #4: 360
Case #5: 840
Case #6: 28
Case #7: 12
Case #8: 60
Case #9: 120
Case #10: 60






        int n, fr;
        cin >> n;

        int* arr;
        int* fr_came;
        arr = new int[15];
        fr_came = new int[30000];

        vfr.clear();
        //lcm(a,b,c) = lcm(lcm(a,b),c)
        for (int j = 0; j < n; ++j)
        {
            //putting input friends wishes into the vector.
            cin>>fr;
            arr[j] = fr;
        }

        for (int s = 1; s < (1 << n); ++s)
        {
            int sum = 0;
            for (int q = 0; q < n; ++q)
            {
                // test for membership of the set
                if (s & (1 << q))
                {
                    sum+=arr[q];
                }
            }

            vfr.push_back(sum +1);
            fr_came[s-1] = sum+1;

        }

        delete[] arr;
        delete[] fr_came;

        for (int k = 0; k < vfr.size(); ++k)
        {
            cout << fr_came[k] << " ";
        }

        v.push_back(lcm_arr(fr_came, n));